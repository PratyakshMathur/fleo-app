{"version":3,"sources":["components/RocketLaunchDetails.js","loadRocket.gif","App.js","serviceWorker.js","index.js"],"names":["RocketLaunchDetails","details","flight_number","mission_name","launch_year","mission_id","launch_success","links","rocket","imgSrc","mission_patch_small","land_success","first_stage","cores","Card","className","src","alt","API_BASE_URL","App","props","state","items","isLoaded","filters","limit","undefined","querystring","stringify","URL","this","getUpdatedApiUrl","setState","fetch","then","response","json","data","fetchAPI","type","value","uniqueLaunchYears","Array","fill","map","_","index","Container","fluid","Row","Col","xs","sm","md","lg","Body","Title","Text","year","Button","variant","toString","onClick","e","updateApiFilters","target","loader","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1f501998.chunk.js","sourcesContent":["import React from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport \"./RocketLaunchDetails.css\";\n\nfunction RocketLaunchDetails({ details }) {\n  const {\n    flight_number,\n    mission_name,\n    mission_id,\n    launch_year,\n    launch_success,\n    links,\n    rocket\n  } = details;\n  const imgSrc = links.mission_patch_small;\n  const land_success = rocket.first_stage.cores[0].land_success;\n\n  return (\n    <Card className=\"Rocket-details-card\">\n      \n        <div key={flight_number}>\n          <div>\n            <img\n              src={imgSrc}\n              alt=\"mission patch img not available on api\"\n              className=\"Rocket-mission-image\"\n            />\n          </div>\n          <div className=\"Rocket-mission-name-flight-number\">\n            {mission_name} #{flight_number}\n          </div>\n          \n          <div className=\"Rocket-detail-label\">\n            Launch Year:{\" \"}\n            <span className=\"Rocket-detail-value\">{launch_year}</span>\n          </div>\n          <div className=\"Rocket-detail-label\">\n            Successful Launch:{\" \"}\n            <span className=\"Rocket-detail-value\">\n              {launch_success ? \"True\" : \"False\"}\n            </span>\n          </div>\n          <div className=\"Rocket-detail-label\">\n            Successful Landing:{\" \"}\n            <span className=\"Rocket-detail-value\">\n              {land_success ? \"True\" : \"False\"}\n            </span>\n          </div>  \n        </div>\n     \n    </Card>\n  );\n}\n\nexport default RocketLaunchDetails;\n","export default __webpack_public_path__ + \"static/media/loadRocket.73425c9f.gif\";","import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Container, Card, Button, Row, Col } from 'react-bootstrap';\nimport RocketLaunchDetails from './components/RocketLaunchDetails';\nimport querystring from 'querystring';\nimport './App.css';\nimport loader from './loadRocket.gif';\n\nconst API_BASE_URL = \"https://api.spacexdata.com/v3/launches?limit=100\";\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: [],\n      isLoaded: false,\n      filters: {\n        limit: 150,\n        launch_year: undefined,\n        launch_success: undefined,\n        land_success: undefined,\n      },\n    }\n\n  }\n\n  getUpdatedApiUrl(filters = {}) {\n    return API_BASE_URL + querystring.stringify({ ...filters });\n  }\n\n  fetchAPI(filters) {\n    const URL = this.getUpdatedApiUrl(filters);\n    this.setState({ isLoaded: false, filters });\n    fetch(URL)\n      .then(response => response.json())\n      .then(data => {\n        this.setState({\n          isLoaded: true,\n          data\n        });\n      });\n  }\n\n  componentDidMount() {\n    this.fetchAPI(this.state.filters);\n  }\n\n  updateApiFilters(type, value) {\n    // if same value is clicked, we remove that filter\n    if (this.state.filters[type] === value) {\n      value = undefined;\n    }\n\n    const filters = {\n      ...this.state.filters,\n      [type]: value,\n    };\n\n    this.fetchAPI(filters);\n  }\n\n\n  render() {\n\n    const { isLoaded, data } = this.state;\n    const uniqueLaunchYears = new Array(16).fill(0).map((_, index) => 2006 + index);\n\n    if (!isLoaded) {\n      return <div className=\"App-loader-container\">\n        <div className=\"App-loader-box\">\n          <img src={loader} alt=\"loading...\" />\n        </div>\n      </div>\n    }\n\n    else {\n\n      return (\n        <div className=\"App\">\n          <h1 className=\"App-header \">Spacex Programs</h1>\n          <Container fluid>\n            <Row>\n              <Col xs={12} sm={12} md={6} lg={3}>\n                <Card className=\"App-filter-card\">\n                  <Card.Body>\n                    <Card.Title className=\"App-filter-header\">\n                      Filter by: \n                    </Card.Title>\n                    <Card.Text className=\"App-filter-heading-launch-year\">\n                      Launch Year\n                      <hr className=\"App-filters-hr\" />\n                    </Card.Text>\n\n                    <Row>\n                      <div className=\"App-filter-button-container\">\n                        {uniqueLaunchYears.map((year) => {\n                          return (\n                            <Button\n                              className=\"App-filter-button\"\n                              variant={\n                                this.state.filters.launch_year ===\n                                year.toString()\n                                  ? \"success\"\n                                  : \"outline-success\"\n                              }\n                              value={year}\n                              onClick={(e) =>\n                                this.updateApiFilters(\n                                  \"launch_year\",\n                                  e.target.value\n                                )\n                              }\n                            >\n                              {year}\n                            </Button>\n                            \n                          );\n                        })}\n                      </div>\n                    </Row>\n\n                    <Card.Text className=\"App-filter-heading\">\n                      Successful Launch\n                      <hr className=\"App-filters-hr\" />\n                    </Card.Text>\n\n                    <div className=\"App-filter-button-container1\">\n                      <Button\n                        className=\"App-filter-button\"\n                        variant={\n                          this.state.filters.launch_success === \"true\"\n                            ? \"success\"\n                            : \"outline-success\"\n                        }\n                        onClick={(e) =>\n                          this.updateApiFilters(\n                            \"launch_success\",\n                            e.target.value\n                          )\n                        }\n                        value=\"true\"\n                      >\n                        True\n                      </Button>\n\n                      <Button\n                        className=\"App-filter-button\"\n                        variant={\n                          this.state.filters.launch_success === \"false\"\n                            ? \"success\"\n                            : \"outline-success\"\n                        }\n                        onClick={(e) =>\n                          this.updateApiFilters(\n                            \"launch_success\",\n                            e.target.value\n                          )\n                        }\n                        value=\"false\"\n                      >\n                        False\n                      </Button>\n                    </div>\n\n                    <Card.Text className=\"App-filter-heading\">\n                      Successful Landing\n                      <hr className=\"App-filters-hr\" />\n                    </Card.Text>\n                    <div className=\"App-filter-button-container1\">\n                      <Button\n                        className=\"App-filter-button\"\n                        variant={\n                          this.state.filters.land_success === \"true\"\n                            ? \"success\"\n                            : \"outline-success\"\n                        }\n                        onClick={(e) =>\n                          this.updateApiFilters(\"land_success\", e.target.value)\n                        }\n                        value=\"true\"\n                      >\n                        True\n                      </Button>\n\n                      <Button\n                        className=\"App-filter-button\"\n                        variant={\n                          this.state.filters.land_success === \"false\"\n                            ? \"success\"\n                            : \"outline-success\"\n                        }\n                        onClick={(e) =>\n                          this.updateApiFilters(\"land_success\", e.target.value)\n                        }\n                        value=\"false\"\n                      >\n                        False\n                      </Button>\n                    </div>\n                  </Card.Body>\n                </Card>\n              </Col>\n\n              <Col xs={12} sm={12} md={6} lg={9}>\n                <Row>\n                  {data.map((details) => {\n                    return (\n                      <Col md={12} lg={4}>\n                        <RocketLaunchDetails details={details} />\n                      </Col>\n                    );\n                  })}\n                </Row>\n              </Col>\n            </Row>\n            <div>\n              <h5 className=\"App-Developers-name\">\n                Developed by : Pratyaksh\n              </h5>\n            </div>\n          </Container>\n        </div>\n      );\n    }\n\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}